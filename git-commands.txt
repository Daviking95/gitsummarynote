git config user.name | to show the username of the repository

git config user.email | to show the user email of the repository

git config --list

pwd 				| to show us the directory that we are in 							the git bash

ls 					| to list all files and folder in the directory 					that we are in

git init 			| to initialize our git repository(which is the 					project folder on our computer)

git add <filename>   | to add a file we create into the staging area

git add .			| to add multiple files to the staging area

git commit -m "message"  | this is second command we run after 									adding the file to the staging area. 								This adds the file to the repository.

git log				| shows log changes made to the repository.

git status			| shows us the condition of the repository if 							there is a need to add and commit files or 							not

git diff			| shows you the changes you've made in file which you've not added to the staging area.(shows you the old text in the file and the new ones you wrote there.). Compares the file in you working copy against your staging area

git diff --staged 		| compares the files in your staging area againast your repository.

git rm <filename>			| to delete a file from the repository. But you'll still have to commit it.

git mv <firstfile> <newfile> | This is a fresh a way of moving and renaming files

git commit -am "Message" 	| The '-am' allows you to skip the staging area and save directly from the working copy to your repository. but be careful how you use this command. Only use it when you made simple changes in your files.

git checkout -- <filename> 		| 'checkout' means you take something from your repsitory and you put it back in your working copy (maybe when you make a mistake but you have not committed it yet)

git reset HEAD <filename> 		| to unstage a staged file that has not been committed yet.

git checkout <first few(like 6) characters of the git verson you want to get back.This is usually what you see after 'commit' word when you run 'git log'> -- <filename>. E.g. git checkout 01e7dba -- index.html				| This command is very useful if you want to go back to a particular version of your commit, maybe after you messed up your recent commit. You first run 'git log' to check all your git commits and the use the command above to get back to the version of the commit you want. This doesn't delete the recent version you messed (it's just there), but you can continue working with the version you want and then you have to run the 'git commit -m "" ' command to continue your work.

<!------------- USING GITHUB TO SAVE AND EDIT REPOSITORIES ----------!>

- To push an existing repository from the command line :
run

git remote add origin https://github.com/Daviking95/DubyTest.git
git push -u origin master

// 'origin' here is the name you want to give your repository, which you'll be using often instead of typing the url over again

// 'push' is adding your changes to the server
// 'fetch' is getting your files from the server and downloading them

just use 'git push' in subsequent times on an existing project
